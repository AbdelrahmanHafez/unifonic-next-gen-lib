/**
 * UnifonicNextGenLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

'use strict';

const _request = require('../Http/Client/RequestClient');
const _configuration = require('../configuration');
const _servers = require('../Servers');
const _apiHelper = require('../APIHelper');
const _baseController = require('./BaseController');

class WrapperController {
    /**
     * Unifonic Get message query API allows you to get details of specified message.
     *
     * @param {string} appsid A character string that uniquely identifies your app
     * @param {long} msgid A unique ID that identifies a message
     * @param {long} to (optional) Destination mobile number, mobile numbers must be in
     * international format without 00 or + Example: (4452023498)
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static createGetMsgQuery(appsid, msgid, to, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // validating required parameters
        if (appsid === null || appsid === undefined) {
            const _err = { errorMessage: 'The parameter `appsid` is a required parameter and cannot be null.',
                errorCode: -1 };
            _callback(_err, null, null);
            return Promise.reject(_err);
        } else if (msgid === null || msgid === undefined) {
            const _err = { errorMessage: 'The parameter `msgid` is a required parameter and cannot be null.',
                errorCode: -1 };
            _callback(_err, null, null);
            return Promise.reject(_err);
        }
        // prepare query string for API call
        const _baseUri = _configuration.getBaseUri(_servers.BASE_URL);

        const _pathUrl = '/wrapper/msgQuery';
        let _queryBuilder = `${_baseUri}${_pathUrl}`;

        // process query parameters
        _queryBuilder = _apiHelper.appendUrlWithQueryParameters(_queryBuilder, {
            appsid,
            msgid,
            to,
        });

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            accept: 'application/json',
            'user-agent': 'APIMATIC 2.0',
        };

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'POST',
            headers: _headers,
            username: _configuration.basicAuthUserName,
            password: _configuration.basicAuthPassword,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    let parsed = JSON.parse(_response.body);
                    parsed = _baseController.getObjectMapper().mapObject(parsed, 'GetMessageQueryResponse');
                    _callback(null, parsed, _context);
                    _fulfill(parsed);
                } else if (_response.statusCode === 401) {
                    const _err = { errorMessage: 'Authentication failed',
                        errorCode: 401,
                        errorResponse: _response.body,
                    };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 402) {
                    const _err = { errorMessage: 'Missing parameter AppSid',
                        errorCode: 402,
                        errorResponse: _response.body,
                    };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 432) {
                    const _err = { errorMessage: 'MessageId must be numeric',
                        errorCode: 432,
                        errorResponse: _response.body,
                    };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 452) {
                    const _err = { errorMessage: 'User must specify either messageId or recipient parameter',
                        errorCode: 452,
                        errorResponse: _response.body,
                    };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
    /**
     * Unifonic Send Wrapper API allows you to send  text messages to  multiple users at the same
     * time
     *
     * @param {string} appsid A character string that uniquely identifies your app
     * @param {string} msg Message body supports both English and unicodes characters, concatenated
     * messages is supported
     * @param {long} to Destination mobile number, mobile numbers must be in international format
     * without 00 or + Example: (4452023498)
     * @param {string} sender The SenderID to send from, App default SenderID is used unless else
     * stated
     * @param {bool} baseEncode (optional) Binary-to-text encoding schemes that represent binary
     * data in an ASCII string format
     * @param {string} encoding (optional) Converts information from a source into symbols for
     * communication or storage, GSM7 for English and UCS2 for Arabic
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static createSendMessage(appsid, msg, to, sender, baseEncode, encoding, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // validating required parameters
        if (appsid === null || appsid === undefined) {
            const _err = { errorMessage: 'The parameter `appsid` is a required parameter and cannot be null.',
                errorCode: -1 };
            _callback(_err, null, null);
            return Promise.reject(_err);
        } else if (msg === null || msg === undefined) {
            const _err = { errorMessage: 'The parameter `msg` is a required parameter and cannot be null.',
                errorCode: -1 };
            _callback(_err, null, null);
            return Promise.reject(_err);
        } else if (to === null || to === undefined) {
            const _err = { errorMessage: 'The parameter `to` is a required parameter and cannot be null.',
                errorCode: -1 };
            _callback(_err, null, null);
            return Promise.reject(_err);
        } else if (sender === null || sender === undefined) {
            const _err = { errorMessage: 'The parameter `sender` is a required parameter and cannot be null.',
                errorCode: -1 };
            _callback(_err, null, null);
            return Promise.reject(_err);
        }
        // prepare query string for API call
        const _baseUri = _configuration.getBaseUri(_servers.BASE_URL);

        const _pathUrl = '/wrapper/sendSMS.php';
        let _queryBuilder = `${_baseUri}${_pathUrl}`;

        // process query parameters
        _queryBuilder = _apiHelper.appendUrlWithQueryParameters(_queryBuilder, {
            appsid,
            msg,
            to,
            sender,
            baseEncode: (baseEncode !== null) ? baseEncode : false,
            encoding: (encoding !== null) ? encoding : 'UCS2',
        });

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            accept: 'application/json',
            'user-agent': 'APIMATIC 2.0',
        };

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'POST',
            headers: _headers,
            username: _configuration.basicAuthUserName,
            password: _configuration.basicAuthPassword,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    let parsed = JSON.parse(_response.body);
                    parsed = _baseController.getObjectMapper().mapObject(parsed, 'SendWrapperResponse');
                    _callback(null, parsed, _context);
                    _fulfill(parsed);
                } else if (_response.statusCode === 401) {
                    const _err = { errorMessage: 'Authentication failed',
                        errorCode: 401,
                        errorResponse: _response.body,
                    };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 402) {
                    const _err = { errorMessage: 'Missing parameter AppSid',
                        errorCode: 402,
                        errorResponse: _response.body,
                    };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 459) {
                    const _err = { errorMessage: 'Authentication parameters are incorrectly base64 encoded',
                        errorCode: 459,
                        errorResponse: _response.body,
                    };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
}
module.exports = WrapperController;
